{"uid":"19df9008110e728b","name":"Negative Test: Update pet with invalid data","fullName":"tests.test_pet_api#test_update_pet_invalid_data","historyId":"060480a85b35e068eb723510e3452b96","time":{"start":1731086402662,"stop":1731086403093,"duration":431},"description":"Test to update a pet with invalid data, expecting failure","descriptionHtml":"<p>Test to update a pet with invalid data, expecting failure</p>\n","status":"failed","statusMessage":"AssertionError: assert 200 in [400, 405]\n +  where 200 = <Response [200]>.status_code","statusTrace":"pet_data = {'category': {'id': 1, 'name': 'dog'}, 'id': 496014, 'name': 'Pet_LHuQq', 'photoUrls': ['https://cdn.britannica.com/92/212692-050-D53981F5/labradoodle-dog-stick-running-grass.jpg'], ...}\n\n    @allure.feature(\"Pet API\")\n    @allure.story(\"Update Pet\")\n    @allure.title(\"Negative Test: Update pet with invalid data\")\n    def test_update_pet_invalid_data(pet_data):\n        \"\"\"Test to update a pet with invalid data, expecting failure\"\"\"\n        response = requests.post(BASE_URL, json=pet_data, headers=HEADERS)\n        assert response.status_code == 200\n        pet_id = response.json()[\"id\"]\n    \n        # Invalid update data\n        invalid_data = {\n            \"id\": pet_id,\n            \"name\": \"\",  # Invalid empty name\n            \"status\": \"unknown123\"  # Invalid status\n        }\n        allure.attach(str(invalid_data), name=\"Invalid Update Data\", attachment_type=allure.attachment_type.JSON)\n    \n        # Perform the update request\n        response = requests.put(BASE_URL, json=invalid_data, headers=HEADERS)\n        allure.attach(response.text, name=\"Invalid Update Response\", attachment_type=allure.attachment_type.TEXT)\n    \n        # Expecting a validation error response\n>       assert response.status_code in [400, 405]\nE       assert 200 in [400, 405]\nE        +  where 200 = <Response [200]>.status_code\n\ntests/test_pet_api.py:153: AssertionError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"cleanup_pets","time":{"start":1731086399230,"stop":1731086399230,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"pet_data","time":{"start":1731086402662,"stop":1731086402662,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"testStage":{"description":"Test to update a pet with invalid data, expecting failure","status":"failed","statusMessage":"AssertionError: assert 200 in [400, 405]\n +  where 200 = <Response [200]>.status_code","statusTrace":"pet_data = {'category': {'id': 1, 'name': 'dog'}, 'id': 496014, 'name': 'Pet_LHuQq', 'photoUrls': ['https://cdn.britannica.com/92/212692-050-D53981F5/labradoodle-dog-stick-running-grass.jpg'], ...}\n\n    @allure.feature(\"Pet API\")\n    @allure.story(\"Update Pet\")\n    @allure.title(\"Negative Test: Update pet with invalid data\")\n    def test_update_pet_invalid_data(pet_data):\n        \"\"\"Test to update a pet with invalid data, expecting failure\"\"\"\n        response = requests.post(BASE_URL, json=pet_data, headers=HEADERS)\n        assert response.status_code == 200\n        pet_id = response.json()[\"id\"]\n    \n        # Invalid update data\n        invalid_data = {\n            \"id\": pet_id,\n            \"name\": \"\",  # Invalid empty name\n            \"status\": \"unknown123\"  # Invalid status\n        }\n        allure.attach(str(invalid_data), name=\"Invalid Update Data\", attachment_type=allure.attachment_type.JSON)\n    \n        # Perform the update request\n        response = requests.put(BASE_URL, json=invalid_data, headers=HEADERS)\n        allure.attach(response.text, name=\"Invalid Update Response\", attachment_type=allure.attachment_type.TEXT)\n    \n        # Expecting a validation error response\n>       assert response.status_code in [400, 405]\nE       assert 200 in [400, 405]\nE        +  where 200 = <Response [200]>.status_code\n\ntests/test_pet_api.py:153: AssertionError","steps":[],"attachments":[{"uid":"986d33b7bdef18fa","name":"Invalid Update Data","source":"986d33b7bdef18fa.json","type":"application/json","size":50},{"uid":"65a089733dcc21a9","name":"Invalid Update Response","source":"65a089733dcc21a9.txt","type":"text/plain","size":70}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":2,"hasContent":true,"attachmentStep":false},"afterStages":[{"name":"cleanup_pets::0","time":{"start":1731086403812,"stop":1731086405616,"duration":1804},"status":"passed","steps":[],"attachments":[{"uid":"e6b3a7c4eed2a71e","name":"Cleanup Results","source":"e6b3a7c4eed2a71e.txt","type":"text/plain","size":344}],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":1,"hasContent":true,"attachmentStep":false}],"labels":[{"name":"story","value":"Update Pet"},{"name":"feature","value":"Pet API"},{"name":"parentSuite","value":"tests"},{"name":"suite","value":"test_pet_api"},{"name":"host","value":"b29744c5852d"},{"name":"thread","value":"1-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.test_pet_api"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"tags":[]},"source":"19df9008110e728b.json","parameterValues":[]}